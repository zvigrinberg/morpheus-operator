---
defaultChannel: alpha
description: "# morpheus-operator\n This is An k8/Openshift Operator to install Nvidia
  Morpheus on cluster, in order to bootstrap working\n on Morpheus SDK in order to
  run sample/example/custom user pipelines.\n\n## Description\nThis operator runs
  on an openshift cluster/k8 cluster, and It Deploys Nvidia Morpheus Deployment along
  all of its dependencies\n\n1. Morpheus Deployment and configure its environment
  automatically.\n2. Triton Server Deployment \n3. Download some models and install
  them automatically on Triton Server  \n4. Milvus Vector DB and its Underlying Etcd
  And Minio Instances As Standalone deployments and services.\n\n\nNote: In order
  to deploy the operator on a cluster, your user should have a cluster-admin `ClusterRole`
  bound to it, or at least\nall the permissions depicted in [this RBAC Role](./config/rbac/role.yaml)\n\n\n##
  Quick-Start\nYouâ€™ll need an openshift/Kubernetes cluster to run against. You can
  use [KIND](https://sigs.k8s.io/kind) to get a local cluster for testing, or run
  against a remote cluster.\n**Note:** Your controller will automatically use the
  current context in your kubeconfig file (i.e. whatever cluster `oc cluster-info`
  shows).\n\n### Running on the cluster\n1. Install Instances of Custom Resources:\n\n```sh\nkubectl
  apply -f config/samples/\n```\n\n2. Build and push your image to the location specified
  by `IMG`:\n\n```sh\nmake docker-build docker-push IMG=<some-registry>/morpheus-operator:tag\n```\n\n3.
  Deploy the Operator to the cluster with the image specified by `IMG`:\n\n```sh\nmake
  deploy IMG=<some-registry>/morpheus-operator:tag\n```\n\n### Uninstall CRDs\nTo
  delete the CRDs from the cluster:\n\n```sh\nmake uninstall\n```\n\n### Undeploy
  controller\nUnDeploy the Operator from the cluster:\n\n```sh\nmake undeploy\n```\n\n###
  Run The Operator Locally\n\n1. Run the operator locally on your machine\n```shell\n
  make install run\n```\n\n2. Create some new project in openshift ( or namespace
  if running on k8)\n```shell\noc new-project morpheus-test\n```\n\n3. On another
  terminal, apply to the cluster a sample `Morpheus` CR ( Custom resource)\n```shell\noc
  apply -f config/samples/ai_v1alpha1_morpheus.yaml \n```\n\n4. Check that all deployments
  and pod created\n```shell\noc get deployments,pods\n```\n5. Press on `Ctrl+Z` or
  `Ctrl+C` to quit the running operator, and then remove CRD from cluster\n```shell\nmake
  uninstall\n```\n\n## Build And Install Operator Using OLM ( Operator Lifecycle Manager)\n\n1.
  Define the following environment variables according to the version to build, and
  according to user/namespace/org in image registry\n```shell\n# change to the current
  operator version \nexport MORPHEUS_VERSION=0.0.2\nexport VERSION=${MORPHEUS_VERSION}\n#
  Set change to your username/org/namespace in your container registry.\nexport USER_NAMESPACE=zgrinber\nexport
  MORPHEUS_IMAGE_BASE=quay.io/${USER_NAMESPACE}/morpheus-operator\nexport IMAGE_BUNDLE_BASE=quay.io/${USER_NAMESPACE}/morpheus-operator-bundle\nexport
  MORPHEUS_BUNDLE_VERSION=v0.0.2\n```\n\n2. Login to your container registry using
  your credentials, for example:\n```shell\npodman login quay.io\n```\n3. Build Operator
  Container Image and push it to registry\n```shell\nIMG=${MORPHEUS_IMAGE_BASE}:${MORPHEUS_VERSION}
  make docker-build docker-push\n```\n4. Build Operator Bundle image and push it to
  registry\n```shell\nIMG=${MORPHEUS_IMAGE_BASE}:${MORPHEUS_VERSION} BUNDLE_IMG=${IMAGE_BUNDLE_BASE}:${MORPHEUS_BUNDLE_VERSION}
  make bundle bundle-build bundle-push\n```\n5. Now Run the bundle and deploy the
  Operator to the cluster all at once\n```shell\noperator-sdk run bundle ${IMAGE_BUNDLE_BASE}:${MORPHEUS_BUNDLE_VERSION}\n```\n\n6.
  Check that the operator installed correctly ( wait until PHASE=`Succeeded`)\n```shell\noc
  get csv morpheus-operator.v0.0.2 -w\n```\n### Using the Operator\n7. Create a new
  project \n```shell\noc new-project morpheus-test-cr\n```\n\n8. Create a sample Custom
  Resource on that Project\n```shell\ncat > morpheus-cr.yaml << EOF\napiVersion: ai.redhat.com/v1alpha1\nkind:
  Morpheus\nmetadata:\n  labels:\n    app.kubernetes.io/name: morpheus\n    app.kubernetes.io/instance:
  morpheus-sample\n    app.kubernetes.io/part-of: morpheus-operator\n    app.kubernetes.io/managed-by:
  kustomize\n    app.kubernetes.io/created-by: morpheus-operator\n  name: morpheus-example\nspec:\n
  \ serviceAccountName: morpheus-sa\n  autoBindSccToSa: true\n  milvus:\n    minio:\n
  \     rootUser: admin\n      rootPassword: admin123#\n  jupyter:\n    labPassword:
  yourPassword    \nEOF\n\noc apply -f morpheus-cr.yaml\n```\n9. Watch the created
  resources:\n```shell\nwatch \"oc get morpheus,sa,role,rolebinding,pvc,deployment,pods,svc,
  -o wide\"\n```\nOutput:\n```shell\nNAME                                      AGE\nmorpheus.ai.redhat.com/morpheus-example
  \  76m\n\nNAME                         SECRETS   AGE\nserviceaccount/morpheus-sa
  \  1         76m\n\nNAME                                              CREATED AT\nrole.rbac.authorization.k8s.io/morpheus-example
  \  2024-06-24T16:29:46Z\n\nNAME                                                                                                    ROLE
  \                                   AGE\n\n\nrolebinding.rbac.authorization.k8s.io/morpheus-example
  \                                                 Role/morpheus-example                   76m\n\n\nNAME
  \                                     STATUS   VOLUME                                     CAPACITY
  \  ACCESS MODES   STORAGECLASS   AGE\npersistentvolumeclaim/milvus-data         Bound
  \   pvc-67d5c557-ae63-4684-8562-5454eb1f5a69   2Gi        RWO            gp3            76m\npersistentvolumeclaim/milvus-etcd-data
  \   Bound    pvc-51dcdf6c-b349-4a76-94ab-aecfcf7f364a   2Gi        RWO            gp3
  \           76m\npersistentvolumeclaim/milvus-minio-data   Bound    pvc-0dc3e64d-39f4-457f-85b6-0f7a4ff5d6c5
  \  2Gi        RWO            gp3            76m\npersistentvolumeclaim/morpheus-repo
  \      Bound    pvc-86ccd3b7-900b-4717-8c2b-049d7f3b2f2b   20Gi       RWO            gp3
  \           76m\n\nNAME                                READY   UP-TO-DATE   AVAILABLE
  \  AGE\ndeployment.apps/milvus-etcd         1/1     1            1           76m\ndeployment.apps/milvus-minio
  \       1/1     1            1           76m\ndeployment.apps/milvus-standalone
  \  1/1     1            1           76m\ndeployment.apps/morpheus-example    1/1
  \    1            1           76m\ndeployment.apps/triton-server       1/1     1
  \           1           76m\n\nNAME                                    READY   STATUS
  \   RESTARTS      AGE\npod/milvus-etcd-747cd8b6b9-2rtw8        1/1     Running   0
  \            76m\npod/milvus-minio-5d4dd775d7-wxkfg       1/1     Running   0             76m\npod/milvus-standalone-58b7f696-k988n
  \   1/1     Running   1 (75m ago)   76m\npod/morpheus-example-546c9767f4-4qppj   1/1
  \    Running   0             76m\npod/triton-server-5865c9bfd5-v6lfd      1/1     Running
  \  0             76m\n\nNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP
  \  PORT(S)                      AGE\nservice/milvus-etcd         ClusterIP   172.30.136.103
  \  <none>        2379/TCP                     76m\nservice/milvus-minio        ClusterIP
  \  172.30.59.72     <none>        9000/TCP,9001/TCP            76m\nservice/milvus-standalone
  \  ClusterIP   172.30.180.225   <none>        19530/TCP,9091/TCP           76m\nservice/triton-server
  \      ClusterIP   172.30.245.119   <none>        8001/TCP,8000/TCP,8002/TCP   76m\nservice/morpheus-example
  \   ClusterIP   172.30.168.235   <none>        8888/TCP                     76m\n\nNAME
  \                                       HOST/PORT                                                                     PATH
  \  SERVICES           PORT    TERMINATION   WILDCARD\nroute.route.openshift.io/morpheus-example
  \  morpheus-example-morpheus-operator.apps.cn-ai-lab.6aw6.p1.openshiftapps.com          morpheus-example
  \  <all>                 None\n\n```\n10. See the Morpheus Custom resource instance
  Status \n```shell\noc describe morpheus morpheus-example\n```\nOutput\n```shell\nName:
  \        morpheus-example\nNamespace:    morpheus-zvika\nLabels:       app.kubernetes.io/created-by=morpheus-operator\n
  \             app.kubernetes.io/instance=morpheus-sample\n              app.kubernetes.io/managed-by=kustomize\n
  \             app.kubernetes.io/name=morpheus\n              app.kubernetes.io/part-of=morpheus-operator\nAnnotations:
  \ <none>\nAPI Version:  ai.redhat.com/v1alpha1\nKind:         Morpheus\nMetadata:\n
  \ Creation Timestamp:  2024-06-24T16:29:46Z\n  Generation:          1\n  Resource
  Version:    429925118\n  UID:                 aa9c9a8c-d102-47f2-a6f6-e909f68e3644\nSpec:\n
  \ Auto Bind Scc To Sa:  true\n  Milvus:\n    Minio:\n      Root Password:     admin123#\n
  \     Root User:         admin\n  Service Account Name:  morpheus-sa\n  Jupyter:\n
  \   Lab Password: yourpassword\nStatus:\n  Conditions:\n    Last Transition Time:
  \ 2024-06-24T16:29:46Z\n    Message:               Morpheus Deployment successfully
  created and deployed!\n    Reason:                Reconciling:Create\n    Status:
  \               True\n    Type:                  MorpheusDeployed\n    Last Transition
  Time:  2024-06-24T16:29:46Z\n    Message:               Triton Server successfully
  Deployed!\n    Reason:                Reconciling:Create\n    Status:                True\n
  \   Type:                  TritonDeployed\n    Last Transition Time:  2024-06-24T16:29:46Z\n
  \   Message:               Etcd Instance successfully Deployed!\n    Reason:                Reconciling:Create\n
  \   Status:                True\n    Type:                  EtcdDeployed\n    Last
  Transition Time:  2024-06-24T16:29:46Z\n    Message:               Minio Instance
  successfully Deployed!\n    Reason:                Reconciling:Create\n    Status:
  \               True\n    Type:                  MinioDeployed\n    Last Transition
  Time:  2024-06-24T16:29:46Z\n    Message:               MilvusDB Instance successfully
  Deployed!\n    Reason:                Reconciling:Create\n    Status:                True\n
  \   Type:                  MilvusDBDeployed\nEvents:                    <none>\n```\n\n11.
  Access Jupyter Notebook/Lab Server\n```shell\n## ROUTE_NAME is like the Morpheus
  custom resource name\nexport ROUTE_NAME=morpheus-example\nxdg-open http://$(oc get
  route $ROUTE_NAME -o=jsonpath=\"{..spec.host}\")/lab\n```\n\n12. Enter the password/token
  you've provided in the Morpheus CR( `.spec.jupyter.labPassword` ) you can extract
  it in a one-liner command:\n```shell\noc get morpheus morpheus-example -o=jsonpath='{.spec.jupyter.labPassword}'
  ; echo \n```\nIn case you didn't input jupyter password in the morpheus CR, the
  password/token will be generated automatically in a random way by the operator,
  the way to get it is as follows ( assuming that morpheus CR name=morpheus-example):\n```shell\noc
  get secret morpheus-example-jupyter-token -o=jsonpath='{.data.JUPYTER_TOKEN}' |
  base64 -d ; echo\n\n```\n### Custom Resource Example\n```yaml\napiVersion: ai.redhat.com/v1alpha1\nkind:
  Morpheus\nmetadata:\n  labels:\n    app.kubernetes.io/name: morpheus\n    app.kubernetes.io/instance:
  morpheus-sample\n    app.kubernetes.io/part-of: morpheus-operator\n    app.kubernetes.io/managed-by:
  kustomize\n    app.kubernetes.io/created-by: morpheus-operator\n  name: morpheus-example\nspec:\n
  \ serviceAccountName: morpheus-sa\n  autoBindSccToSa: true\n  milvus:\n    minio:\n
  \     rootUser: admin\n      rootPassword: admin123#\n  jupyter:\n    labPassword:
  yourPassword\n```\n\n### Morpheus Operator API Spec\n| Parameter                                 |
  Description                                                                                                                                                                                                                 |
  Values                | Default     |\n|-------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-------------|\n|
  spec.serviceAccountName                   | Service account name that will run morpheus
  jupyter deployment and triton deployment ,                                                                                                                                      |
  string               | morpheus-sa |\n| spec.autoBindSccToSa                      |
  For openshift only, create a role + rolebinding for the `serviceAccountName so deployment,
  granting permission of anyUid scc, if not running on openshift ( k8), must explicitly
  changed to false                           | Boolean (true, false) | true\n| spec.milvus.minio.rootUser
  \               | root user of minio object store used by milvusDB instance to be
  deployed                                                                                                                                                    |
  string                | admin\n| spec.milvus.minio.rootPassword            | root
  password of minio object store used by milvusDB instance to be deployed                                                                                                                                                |
  string                | admin123#\n| spec.milvus.minio.storagePvcSize          |
  size of Pvc size used by Minio instance                                                                                                                                                                                     |
  string                | 2Gi\n| spec.milvus.etcd.storagePvcSize           | size
  of Pvc size used by etcd key store instance used by MilvusDB                                                                                                                                                           |
  string                | 2Gi\n| spec.milvus.StoragePvcSize                | size
  of Pvc size used by MilvusDB                                                                                                                                                                                           |
  string                | 2Gi\n| spec.tritonServer.morpheusRepoStorageSize | size
  of Pvc size used by Triton inference server                                                                                                                                                                            |
  string                | 20Gi\n| spec.jupyter.labPassword                  | Password
  of deployed jupyter notebook server, if not explicitly set, then a generated random
  token is being used, the password is stored in a secret in the CR namespace with
  name of  ${morpheus-cr-name} + -jupyter-token | string                | generated
  random token\n\n### How it works\nThis project aims to follow the Kubernetes [Operator
  pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/).\n\nIt
  uses [Controllers](https://kubernetes.io/docs/concepts/architecture/controller/),\nwhich
  provide a reconcile function responsible for synchronizing resources until the desired
  state is reached on the cluster.\n\n\n### Modifying the API definitions\nIf you
  are editing the API definitions, generate the manifests such as CRs or CRDs using:\n\n```sh\nmake
  manifests\n```\n\n**NOTE:** Run `make --help` for more information on all potential
  `make` targets\n\nMore information can be found via the [Kubebuilder Documentation](https://book.kubebuilder.io/introduction.html)\n\n##
  License\n\nCopyright 2024.\n\nLicensed under the Apache License, Version 2.0 (the
  \"License\");\nyou may not use this file except in compliance with the License.\nYou
  may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless
  required by applicable law or agreed to in writing, software\ndistributed under
  the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied.\nSee the License for the specific language
  governing permissions and\nlimitations under the License.\n\n"
name: morpheus-operator
schema: olm.package
---
image: quay.io/zgrinber/morpheus-operator-bundle:v0.0.2
name: morpheus-operator.v0.0.2
package: morpheus-operator
properties:
- type: olm.gvk
  value:
    group: ai.redhat.com
    kind: Morpheus
    version: v1alpha1
- type: olm.package
  value:
    packageName: morpheus-operator
    version: 0.0.2
- type: olm.package.required
  value:
    packageName: gpu-operator-certified
    versionRange: '> 23.9.1'
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "ai.redhat.com/v1alpha1",
            "kind": "Morpheus",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "morpheus-operator",
                "app.kubernetes.io/instance": "morpheus-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "morpheus",
                "app.kubernetes.io/part-of": "morpheus-operator"
              },
              "name": "morpheus-example"
            },
            "spec": {
              "autoBindSccToSa": true,
              "jupyter": {
                "labPassword": "yourPassword"
              },
              "milvus": {
                "minio": {
                  "rootPassword": "admin123#",
                  "rootUser": "admin"
                }
              },
              "serviceAccountName": "morpheus-sa"
            }
          }
        ]
      capabilities: Basic Install
      createdAt: "2024-06-27T18:23:39Z"
      operators.operatorframework.io/builder: operator-sdk-v1.31.0-ocp
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Morpheus is the Schema for the morpheuses API
        displayName: Morpheus
        kind: Morpheus
        name: morpheus.ai.redhat.com
        statusDescriptors:
        - displayName: Conditions
          path: conditions
        version: v1alpha1
    description: Helps installs Nvidia Morpheus on an openshift and Kubernetes clusters
    displayName: morpheus-operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - ai
    - morpheus
    links:
    - name: Morpheus Operator
      url: https://github.com/zvigrinberg/morpheus-operator
    maintainers:
    - email: zgrinber@redhat.com
      name: zvigrinberg
    maturity: alpha
    provider:
      name: redhat
      url: redhat.com
relatedImages:
- image: quay.io/zgrinber/morpheus-operator-bundle:v0.0.2
  name: ""
- image: quay.io/zgrinber/morpheus-operator:0.0.2
  name: ""
- image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.15
  name: ""
schema: olm.bundle
---
image: quay.io/zgrinber/morpheus-operator-bundle:v0.0.3
name: morpheus-operator.v0.0.3
package: morpheus-operator
properties:
- type: olm.gvk
  value:
    group: ai.redhat.com
    kind: Morpheus
    version: v1alpha1
- type: olm.package
  value:
    packageName: morpheus-operator
    version: 0.0.3
- type: olm.package.required
  value:
    packageName: gpu-operator-certified
    versionRange: '> 23.9.1'
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "ai.redhat.com/v1alpha1",
            "kind": "Morpheus",
            "metadata": {
              "labels": {
                "app.kubernetes.io/created-by": "morpheus-operator",
                "app.kubernetes.io/instance": "morpheus-sample",
                "app.kubernetes.io/managed-by": "kustomize",
                "app.kubernetes.io/name": "morpheus",
                "app.kubernetes.io/part-of": "morpheus-operator"
              },
              "name": "morpheus-example"
            },
            "spec": {
              "autoBindSccToSa": true,
              "jupyter": {
                "labPassword": "yourPassword"
              },
              "milvus": {
                "minio": {
                  "rootPassword": "admin123#",
                  "rootUser": "admin"
                }
              },
              "serviceAccountName": "morpheus-sa"
            }
          }
        ]
      capabilities: Seamless Updates
      createdAt: "2024-07-02T19:49:33Z"
      operators.operatorframework.io/builder: operator-sdk-v1.31.0-ocp
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Morpheus is the Schema for the morpheuses API
        displayName: Morpheus
        kind: Morpheus
        name: morpheus.ai.redhat.com
        statusDescriptors:
        - displayName: Conditions
          path: conditions
        version: v1alpha1
    description: Helps installs Nvidia Morpheus on an openshift and Kubernetes clusters
    displayName: morpheus-operator
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - ai
    - morpheus
    links:
    - name: Morpheus Operator
      url: https://github.com/zvigrinberg/morpheus-operator
    maintainers:
    - email: zgrinber@redhat.com
      name: zvigrinberg
    maturity: alpha
    provider:
      name: redhat
      url: redhat.com
relatedImages:
- image: quay.io/zgrinber/morpheus-operator-bundle:v0.0.3
  name: ""
- image: quay.io/zgrinber/morpheus-operator:0.0.3
  name: ""
- image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.15
  name: ""
schema: olm.bundle
---
schema: olm.channel
package: morpheus-operator
name: alpha
entries:
  - name: morpheus-operator.v0.0.2
  - name: morpheus-operator.v0.0.3
    replaces: morpheus-operator.v0.0.2